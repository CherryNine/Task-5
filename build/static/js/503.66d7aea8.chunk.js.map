{"version":3,"file":"static/js/503.66d7aea8.chunk.js","mappings":"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","sources":["app/users/store/users.selectors.ts","app/users/components/UserFilters.tsx","app/users/components/UserTable.tsx","app/users/users.page.tsx"],"sourcesContent":["import { RootState } from 'store';\n\nexport const usersSelector = (state: RootState) => state.users.users;\nexport const usersLoadingSelector = (state: RootState) => state.users.pending;\nexport const usersErrorSelector = (state: RootState) => state.users.error;\n","import React from 'react';\nimport { Button, Slider, TextField, Typography, Box, Grid, Select, MenuItem } from '@mui/material';\nimport { UserFiltersProps } from '../types/userFiltersProps';\n\n\n\nconst UserFilters: React.FC<UserFiltersProps> = ({\n  region,\n  setRegion,\n  errorCount,\n  setErrorCount,\n  seed,\n  setSeed,\n  handleSeedRandom,\n}) => {\n  return (\n    <Box sx={{ marginBottom: 2 }}>\n      <Typography variant=\"subtitle1\">Region:</Typography>\n      <Select value={region} onChange={(e) => setRegion(e.target.value)} sx={{ marginBottom: 2 }}>\n        <MenuItem value='CA'>Canada</MenuItem>\n        <MenuItem value='PL'>Poland</MenuItem>\n        <MenuItem value='DE'>Germany</MenuItem>\n      </Select>\n\n      <Typography gutterBottom>Errors (0-10): {errorCount.toFixed(2)}</Typography>\n      <Box sx={{ width: '20%', marginBottom: 2 }}>\n        <Slider\n          value={errorCount}\n          onChange={(e, newValue) => setErrorCount(newValue as number)}\n          min={0}\n          max={10}\n          step={0.5}\n          valueLabelDisplay=\"auto\"\n        />\n      </Box>\n\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <TextField\n            label=\"Errors\"\n            type=\"number\"\n            value={errorCount}\n            onChange={(e) => {\n              const value = e.target.value === '' ? 0 : Math.max(0, Math.min(1000, parseFloat(e.target.value)));\n              setErrorCount(value);\n            }}\n            inputProps={{ min: 0, max: 1000 }}\n            sx={{ width: '100px' }}\n          />\n        </Grid>\n\n        <Grid item>\n          <TextField\n            label=\"Seed\"\n            type=\"number\"\n            value={seed}\n            onChange={(e) => {\n              const value = e.target.value;\n              setSeed(value === \"\" ? 0 : Math.max(0, Math.min(1000, parseInt(value))));\n            }}\n            inputProps={{ min: 0, max: 1000 }}\n            sx={{ width: '100px' }}\n          />\n        </Grid>\n\n        <Grid item>\n          <Button variant=\"contained\" onClick={handleSeedRandom}>\n            Random\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default UserFilters;\n","import React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { Typography } from '@mui/material';\nimport { CircularProgress } from '@mui/material';\nimport { UserTableProps } from '../types/UserTableProps';\n\nconst UserTable: React.FC<UserTableProps> = ({ uniqueUsers, loading, error }) => {\n  const columns = [\n    { field: 'uniqueId', headerName: 'â„–', width: 100 },\n    { field: 'id', headerName: 'ID', width: 300 },\n    { field: 'name', headerName: 'Full Name', width: 250 },\n    { field: 'address', headerName: 'Address', width: 250 },\n    { field: 'phone', headerName: 'Phone', width: 250 },\n  ];\n\n  return (\n    <>\n      {loading && (\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n          <CircularProgress />\n        </div>\n      )}\n      {error && <Typography color=\"error\">{error}</Typography>}\n      <DataGrid\n        rows={uniqueUsers.map((user, index) => ({\n          ...user,\n          uniqueId: index + 1,\n          key: user.id,\n        }))}\n        columns={columns}\n        loading={loading}\n        autoHeight\n        disableSelectionOnClick\n        paginationMode=\"server\"\n        getRowId={(row) => row.id}\n      />\n    </>\n  );\n};\n\nexport default UserTable;\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Box, Typography } from '@mui/material';\r\n\r\nimport { usersErrorSelector, usersLoadingSelector } from './store/users.selectors';\r\nimport { generateUsers } from './store/users.actions';\r\nimport { Random } from 'random-js';\r\nimport UserFilters from './components/UserFilters';\r\nimport UserTable from './components/UserTable';\r\n\r\nconst UsersPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(usersLoadingSelector);\r\n  const error = useSelector(usersErrorSelector);\r\n  const random = new Random();\r\n\r\n  const [region, setRegion] = useState('CA');\r\n  const [errorCount, setErrorCount] = useState(0);\r\n  const [seed, setSeed] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [allUsers, setAllUsers] = useState<any[]>([]);\r\n\r\n  const fetchUsers = useCallback(async () => {\r\n    const action = await dispatch<any>(generateUsers({ region, errorCount, seed, page }));\r\n    if (action.meta.requestStatus === 'fulfilled') {\r\n      setAllUsers((prev) => [...prev, ...action.payload]);\r\n    }\r\n  }, [dispatch, region, errorCount, seed, page]);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, [fetchUsers, page]);\r\n\r\n  useEffect(() => {\r\n    setAllUsers([]);\r\n    setPage(1);\r\n  }, [region, errorCount, seed]);\r\n\r\n  const loadMore = (event: React.UIEvent<HTMLElement>) => {\r\n    const { scrollTop, scrollHeight, clientHeight } = event.currentTarget;\r\n    if (scrollHeight - scrollTop <= clientHeight + 50 && !loading) {\r\n      setPage((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleSeedRandom = () => {\r\n    setSeed(random.integer(0, 9999));\r\n  };\r\n\r\n  const uniqueUsers = Array.from(new Set(allUsers.map(user => user.id)))\r\n    .map(id => allUsers.find(user => user.id === id));\r\n\r\n  return (\r\n    <Box sx={{ padding: 2, height: '80vh', overflow: 'auto' }} onScroll={loadMore}>\r\n      <Typography variant=\"h4\">User Generation</Typography>\r\n      <UserFilters\r\n        region={region}\r\n        setRegion={setRegion}\r\n        errorCount={errorCount}\r\n        setErrorCount={setErrorCount}\r\n        seed={seed}\r\n        setSeed={setSeed}\r\n        handleSeedRandom={handleSeedRandom}\r\n      />\r\n      <UserTable uniqueUsers={uniqueUsers} loading={loading} error={error} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UsersPage;\r\n"],"names":["usersLoadingSelector","state","users","pending","usersErrorSelector","error","_ref","region","setRegion","errorCount","setErrorCount","seed","setSeed","handleSeedRandom","_jsxs","Box","sx","marginBottom","children","_jsx","Typography","variant","Select","value","onChange","e","target","MenuItem","gutterBottom","toFixed","width","Slider","newValue","min","max","step","valueLabelDisplay","Grid","container","spacing","alignItems","item","TextField","label","type","Math","parseFloat","inputProps","parseInt","Button","onClick","uniqueUsers","loading","_Fragment","style","display","justifyContent","height","CircularProgress","color","DataGrid","rows","map","user","index","uniqueId","key","id","columns","field","headerName","autoHeight","disableSelectionOnClick","paginationMode","getRowId","row","UsersPage","dispatch","useDispatch","useSelector","random","Random","useState","page","setPage","allUsers","setAllUsers","fetchUsers","useCallback","async","action","generateUsers","meta","requestStatus","prev","payload","useEffect","Array","from","Set","find","padding","overflow","onScroll","event","scrollTop","scrollHeight","clientHeight","currentTarget","UserFilters","integer","UserTable"],"sourceRoot":""}